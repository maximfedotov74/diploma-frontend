/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * Swagger Diploma Backend openapi
 * Swagger Diploma Backend openapi
 * OpenAPI spec version: 1.0
 */
import { api } from './api';
import type { BodyType } from './api';
export type GetApiProductCatalogCategorySlugParams = {
/**
 * sizes
 */
size?: string;
/**
 * brands
 */
brands?: string;
/**
 * sort by
 */
sort?: string;
/**
 * get items with sale
 */
is_sale?: string;
/**
 * from - to
 */
price?: string;
/**
 * pagination page
 */
page?: string;
};

export type GetApiProductAdminParams = {
/**
 * Page for pagination
 */
page: number;
/**
 * categoryId
 */
categoryId?: number;
/**
 * brandId
 */
brandId?: number;
};

export type PostApiFileBody = {
  /** File */
  file: Blob;
};

export type GetApiFeedbackParams = {
/**
 * Order [ASC | DESC]
 */
order?: string;
};

export type GetApiDeliverySearchParams = {
/**
 * delivery-point with_fitting filter
 */
with_fitting?: boolean;
/**
 * delivery-point search_text filter
 */
search_text?: string;
};

export interface ModelUploadResponse {
  path?: string;
}

export interface ModelUpdateProductModelDto {
  discount?: number;
  image_path?: string;
  price?: number;
}

export interface ModelUpdateProductDto {
  description?: string;
  title?: string;
}

export interface ModelUpdateOptionValueDto {
  info?: string;
  value?: string;
}

export interface ModelUpdateOptionDto {
  for_catalog?: boolean;
  slug?: string;
  title?: string;
}

export interface ModelUpdateDeliveryPointDto {
  address?: string;
  city?: string;
  coords?: string;
  info?: string;
  title?: string;
  with_fitting?: boolean;
  work_schedule?: string;
}

export interface ModelUpdateCategoryDto {
  img_path?: string;
  short_title?: string;
  title?: string;
}

export interface ModelUpdateBrandDto {
  description?: string;
  img_path?: string;
  title?: string;
}

export interface ModelRoleUser {
  email: string;
  user_id: number;
}

export interface ModelRole {
  role_id: number;
  title: string;
  users: ModelRoleUser[];
}

export interface ModelRegistrationResponse {
  id: number;
}

export interface ModelProductRelation {
  brand: ModelBrand;
  category: ModelCategoryModel;
  description?: string;
  id: number;
  model?: ModelProductModelRelation;
  title: string;
}

export interface ModelProductModelSize {
  in_stock: number;
  literal: string;
  model_id: number;
  size_id: number;
  size_model_id: number;
  size_value: string;
}

export interface ModelProductModelRelation {
  article: string;
  discount?: number;
  id?: number;
  image_path: string;
  images: ModelProductModelImg[];
  options?: ModelProductModelOption[];
  price?: number;
  product_id?: number;
  sizes: ModelProductModelSize[];
  slug: string;
}

export interface ModelProductModelOptionValue {
  id: number;
  info?: string;
  value: string;
}

export interface ModelProductModelOption {
  id: number;
  slug: string;
  title: string;
  values?: ModelProductModelOptionValue[];
}

export interface ModelProductModelImg {
  id: number;
  img_path: string;
}

export interface ModelProductModelColors {
  color: ModelColor;
  id: number;
  image_path: string;
  slug: string;
}

export interface ModelOptionValue {
  id?: number;
  info?: string;
  option_id?: number;
  value?: string;
}

export interface ModelOption {
  for_catalog: boolean;
  id: number;
  slug: string;
  title: string;
  values?: ModelOptionValue[];
}

export interface ModelModelFeedbackResponse {
  avg_rate?: number;
  feedback: ModelFeedback[];
  rate_count?: number;
}

export interface ModelLoginResponse {
  tokens: JwtTokens;
  user_id: number;
}

export interface ModelLoginDto {
  email: string;
  password: string;
}

export interface ModelFeedbackUser {
  avatar?: string;
  email: string;
  first_name?: string;
  id: number;
  last_name?: string;
}

export interface ModelFeedback {
  created_at: string;
  id: number;
  is_hidden: boolean;
  model_id: number;
  rate: number;
  text: string;
  updated_at: string;
  user: ModelFeedbackUser;
}

export interface ModelDeliveryPoint {
  address: string;
  city: string;
  coords: string;
  delivery_point_id: number;
  info?: string;
  title: string;
  with_fitting: boolean;
  work_schedule: string;
}

export interface ModelCreateUserDto {
  email: string;
  password: string;
}

export interface ModelCreateSizeDto {
  value: string;
}

export interface ModelCreateRoleDto {
  title: string;
}

export interface ModelCreateProductModelDto {
  discount?: number;
  image_path: string;
  price: number;
  product_id: number;
}

export interface ModelCreateProductDto {
  brand_id: number;
  category_id: number;
  description?: string;
  title: string;
}

export interface ModelCreateProducModelImg {
  img_path: string;
  product_model_id: number;
}

export interface ModelCreateOptionValueDto {
  info?: string;
  option_id: number;
  value: string;
}

export interface ModelCreateOptionDto {
  slug: string;
  title: string;
}

export interface ModelCreateDeliveryPointDto {
  address: string;
  city: string;
  coords: string;
  info?: string;
  title: string;
  with_fitting?: boolean;
  work_schedule: string;
}

export interface ModelCreateCategoryDto {
  img_path?: string;
  parent_category_id?: number;
  short_title: string;
  title: string;
}

export interface ModelCreateBrandDto {
  description?: string;
  img_path?: string;
  title: string;
}

export interface ModelColor {
  value: string;
}

export interface ModelCategoryRelation {
  category_id: number;
  img_path?: string;
  level: number;
  parent_category_id?: number;
  short_title: string;
  slug: string;
  subcategories: ModelChild[];
  title: string;
}

export interface ModelChild {
  category_id: number;
  img_path?: string;
  level: number;
  parent_category_id?: number;
  short_title: string;
  slug: string;
  subcategories: ModelCategoryRelation[];
  title: string;
}

export interface ModelCategoryModel {
  category_id: number;
  img_path?: string;
  parent_category_id?: number;
  short_title: string;
  slug: string;
  title: string;
}

export interface ModelCatalogValue {
  option_id: number;
  value: string;
  value_id: number;
}

export interface ModelCatalogSize {
  size_id: number;
  value: string;
}

export interface ModelCatalogProductModel {
  article: string;
  brand: ModelBrand;
  category: ModelCategoryModel;
  images?: ModelProductModelImg[];
  model_discount?: number;
  model_id: number;
  model_main_image_path: string;
  model_price: number;
  product_id: number;
  product_slug: string;
  product_title: string;
  sizes?: ModelProductModelSize[];
}

export interface ModelCatalogResponse {
  models?: ModelCatalogProductModel[];
  total_count: number;
}

export interface ModelCatalogPrice {
  max_price: number;
  min_price: number;
}

export interface ModelCatalogOption {
  option_id: number;
  slug: string;
  title: string;
  values: ModelCatalogValue[];
}

export interface ModelCatalogCategoryRelation {
  active: boolean;
  category_id: number;
  img_path?: string;
  level: number;
  parent_category_id?: number;
  short_title: string;
  slug: string;
  subcategories: ModelCatalogChild[];
  title: string;
}

export interface ModelCatalogChild {
  active: boolean;
  category_id: number;
  img_path?: string;
  level: number;
  parent_category_id?: number;
  short_title: string;
  slug: string;
  subcategories: ModelCatalogCategoryRelation[];
  title: string;
}

export interface ModelCatalogBrand {
  brand_id: number;
  brand_title: string;
}

export interface ModelCatalogFilters {
  brands: ModelCatalogBrand[];
  options: ModelCatalogOption[];
  price: ModelCatalogPrice;
  sizes: ModelCatalogSize[];
}

export interface ModelCartItemProductModel {
  brand: ModelCartItemBrand;
  category: ModelCartItemCategory;
  discount?: number;
  image_path: string;
  model_id: number;
  price: number;
  product_id: number;
  slug: string;
  title: string;
}

export interface ModelCartItemModelSize {
  in_stock: number;
  literal_size: string;
  model: ModelCartItemProductModel;
  model_size_id: number;
  size_id: number;
  size_value: string;
}

export interface ModelCartItemCategory {
  category_id: number;
  short_title: string;
  slug: string;
  title: string;
}

export interface ModelCartItemBrand {
  brand_id: number;
  slug: string;
  title: string;
}

export interface ModelCartItem {
  cart_item_id: number;
  cart_item_model_size: ModelCartItemModelSize;
  quantity: number;
}

export interface ModelBrand {
  description?: string;
  id: number;
  img_path?: string;
  slug: string;
  title: string;
}

export interface ModelAdminProductResponse {
  products?: ModelAdminProduct[];
  total: number;
}

export interface ModelAdminProductModelRelation {
  article: string;
  discount?: number;
  id: number;
  image_path: string;
  price: number;
  product_id: number;
  slug: string;
}

export interface ModelAdminProduct {
  brand: ModelBrand;
  category: ModelCategoryModel;
  description?: string;
  id: number;
  title: string;
}

export interface ModelAddToWishDto {
  model_id: number;
}

export interface ModelAddToCartDto {
  model_size_id: number;
}

export interface ModelAddSizeToProductModelDto {
  in_stock: number;
  literal: string;
  product_model_id: number;
  size_id: number;
}

export interface ModelAddRoleToUserDto {
  title: string;
  user_id: number;
}

export interface ModelAddOptionToProductModelDto {
  option_id: number;
  product_model_id: number;
  value_id: number;
}

export interface ModelAddFeedbackDto {
  model_id: number;
  rate: number;
  text: string;
}

export interface JwtTokens {
  access_exp_time: string;
  access_token: string;
  refresh_exp_time: string;
  refresh_token: string;
}

export interface FallValidationErrorItem {
  key?: string;
  message?: string;
}

export interface FallValidationError {
  errors?: FallValidationErrorItem[];
  message: string;
  status: number;
}

export interface FallAppErr {
  message: string;
  status: number;
}





  /**
 * Login to an account with account data
 * @summary Login
 */
export const postApiAuthLogin = (
    modelLoginDto: BodyType<ModelLoginDto>,
 ) => {
      return api<ModelLoginResponse>(
      {url: `/api/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: modelLoginDto
    },
      );
    }
  
/**
 * Refresh tokens by cookies refresh_token
 * @summary Refresh tokens
 */
export const getApiAuthRefreshToken = (
    
 ) => {
      return api<ModelLoginResponse>(
      {url: `/api/auth/refresh-token`, method: 'GET'
    },
      );
    }
  
/**
 * Registation by body arguments
 * @summary Registation user
 */
export const postApiAuthRegistration = (
    modelCreateUserDto: BodyType<ModelCreateUserDto>,
 ) => {
      return api<ModelRegistrationResponse>(
      {url: `/api/auth/registration`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: modelCreateUserDto
    },
      );
    }
  
/**
 * Get all brands
 * @summary Get all brands
 */
export const getApiBrand = (
    
 ) => {
      return api<ModelBrand[]>(
      {url: `/api/brand/`, method: 'GET'
    },
      );
    }
  
/**
 * Create brand
 * @summary Create brand
 */
export const postApiBrand = (
    modelCreateBrandDto: BodyType<ModelCreateBrandDto>,
 ) => {
      return api<void>(
      {url: `/api/brand/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: modelCreateBrandDto
    },
      );
    }
  
/**
 * Update brand
 * @summary Update brand
 */
export const patchApiBrandId = (
    id: number,
    modelUpdateBrandDto: BodyType<ModelUpdateBrandDto>,
 ) => {
      return api<void>(
      {url: `/api/brand/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: modelUpdateBrandDto
    },
      );
    }
  
/**
 * Get brand by slug
 * @summary Get brand by slug
 */
export const getApiBrandSlug = (
    slug: string,
 ) => {
      return api<ModelBrand>(
      {url: `/api/brand/${slug}`, method: 'GET'
    },
      );
    }
  
/**
 * Delete brand by slug
 * @summary Delete brand by slug
 */
export const deleteApiBrandSlug = (
    slug: string,
 ) => {
      return api<void>(
      {url: `/api/brand/${slug}`, method: 'DELETE'
    },
      );
    }
  
/**
 * Get all categories
 * @summary Get all categories
 */
export const getApiCategory = (
    
 ) => {
      return api<ModelCategoryRelation[]>(
      {url: `/api/category/`, method: 'GET'
    },
      );
    }
  
/**
 * Create category
 * @summary Create category
 */
export const postApiCategory = (
    modelCreateCategoryDto: BodyType<ModelCreateCategoryDto>,
 ) => {
      return api<FallAppErr>(
      {url: `/api/category/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: modelCreateCategoryDto
    },
      );
    }
  
/**
 * Get catalog categories
 * @summary Get catalog categories
 */
export const getApiCategoryCatalogSlug = (
    slug: string,
 ) => {
      return api<ModelCatalogCategoryRelation[]>(
      {url: `/api/category/catalog/${slug}`, method: 'GET'
    },
      );
    }
  
/**
 * Get category by slug with subcategories
 * @summary Get category by slug with subcategories
 */
export const getApiCategoryRelationSlug = (
    slug: string,
 ) => {
      return api<ModelCategoryRelation>(
      {url: `/api/category/relation/${slug}`, method: 'GET'
    },
      );
    }
  
/**
 * Get top level categories
 * @summary Get top level categories
 */
export const getApiCategoryTop = (
    
 ) => {
      return api<ModelCategoryModel[]>(
      {url: `/api/category/top`, method: 'GET'
    },
      );
    }
  
/**
 * Update category
 * @summary Update category
 */
export const patchApiCategoryId = (
    id: number,
    modelUpdateCategoryDto: BodyType<ModelUpdateCategoryDto>,
 ) => {
      return api<void>(
      {url: `/api/category/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: modelUpdateCategoryDto
    },
      );
    }
  
/**
 * Get category by slug
 * @summary Get category by slug
 */
export const getApiCategorySlug = (
    slug: string,
 ) => {
      return api<ModelCategoryModel>(
      {url: `/api/category/${slug}`, method: 'GET'
    },
      );
    }
  
/**
 * Delete category by slug
 * @summary Delete category by slug
 */
export const deleteApiCategorySlug = (
    slug: string,
 ) => {
      return api<FallAppErr>(
      {url: `/api/category/${slug}`, method: 'DELETE'
    },
      );
    }
  
/**
 * Get catalog filters
 * @summary Get catalog filters
 */
export const getApiCharacteristicsCatalogSlug = (
    slug: string,
 ) => {
      return api<ModelCatalogFilters>(
      {url: `/api/characteristics/catalog/${slug}`, method: 'GET'
    },
      );
    }
  
/**
 * Get all options
 * @summary Get all options
 */
export const getApiCharacteristicsOption = (
    
 ) => {
      return api<ModelOption[]>(
      {url: `/api/characteristics/option`, method: 'GET'
    },
      );
    }
  
/**
 * Create option
 * @summary Create option
 */
export const postApiCharacteristicsOption = (
    modelCreateOptionDto: BodyType<ModelCreateOptionDto>,
 ) => {
      return api<void>(
      {url: `/api/characteristics/option`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: modelCreateOptionDto
    },
      );
    }
  
/**
 * Add option to product model
 * @summary Add option to product model
 */
export const postApiCharacteristicsOptionModel = (
    modelAddOptionToProductModelDto: BodyType<ModelAddOptionToProductModelDto>,
 ) => {
      return api<void>(
      {url: `/api/characteristics/option/model`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: modelAddOptionToProductModelDto
    },
      );
    }
  
/**
 * Delete option from product model by id
 * @summary Delete option from product model by id
 */
export const deleteApiCharacteristicsOptionModelId = (
    id: number,
 ) => {
      return api<void>(
      {url: `/api/characteristics/option/model/${id}`, method: 'DELETE'
    },
      );
    }
  
/**
 * Delete option by id
 * @summary Delete option by id
 */
export const deleteApiCharacteristicsOptionId = (
    id: number,
 ) => {
      return api<void>(
      {url: `/api/characteristics/option/${id}`, method: 'DELETE'
    },
      );
    }
  
/**
 * Update option
 * @summary Update option
 */
export const patchApiCharacteristicsOptionId = (
    id: number,
    modelUpdateOptionDto: BodyType<ModelUpdateOptionDto>,
 ) => {
      return api<void>(
      {url: `/api/characteristics/option/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: modelUpdateOptionDto
    },
      );
    }
  
/**
 * Get option by slug
 * @summary Get option by slug
 */
export const getApiCharacteristicsOptionSlug = (
    slug: string,
 ) => {
      return api<ModelOption>(
      {url: `/api/characteristics/option/${slug}`, method: 'GET'
    },
      );
    }
  
/**
 * Create size
 * @summary Create size
 */
export const postApiCharacteristicsSize = (
    modelCreateSizeDto: BodyType<ModelCreateSizeDto>,
 ) => {
      return api<void>(
      {url: `/api/characteristics/size`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: modelCreateSizeDto
    },
      );
    }
  
/**
 * size option to product model
 * @summary Add size to product model
 */
export const postApiCharacteristicsSizeModel = (
    modelAddSizeToProductModelDto: BodyType<ModelAddSizeToProductModelDto>,
 ) => {
      return api<void>(
      {url: `/api/characteristics/size/model`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: modelAddSizeToProductModelDto
    },
      );
    }
  
/**
 * Delete size from product model by id
 * @summary Delete size from product model by id
 */
export const deleteApiCharacteristicsSizeModelId = (
    id: number,
 ) => {
      return api<void>(
      {url: `/api/characteristics/size/model/${id}`, method: 'DELETE'
    },
      );
    }
  
/**
 * Delete size by id
 * @summary Delete size by id
 */
export const deleteApiCharacteristicsSizeId = (
    id: number,
 ) => {
      return api<void>(
      {url: `/api/characteristics/size/${id}`, method: 'DELETE'
    },
      );
    }
  
/**
 * Create option value
 * @summary Create option value
 */
export const postApiCharacteristicsValue = (
    modelCreateOptionValueDto: BodyType<ModelCreateOptionValueDto>,
 ) => {
      return api<void>(
      {url: `/api/characteristics/value`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: modelCreateOptionValueDto
    },
      );
    }
  
/**
 * Delete option value by id
 * @summary Delete option value by id
 */
export const deleteApiCharacteristicsValueId = (
    id: number,
 ) => {
      return api<void>(
      {url: `/api/characteristics/value/${id}`, method: 'DELETE'
    },
      );
    }
  
/**
 * Update option value
 * @summary Update option value
 */
export const patchApiCharacteristicsValueId = (
    id: number,
    modelUpdateOptionValueDto: BodyType<ModelUpdateOptionValueDto>,
 ) => {
      return api<void>(
      {url: `/api/characteristics/value/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: modelUpdateOptionValueDto
    },
      );
    }
  
/**
 * Create delivery-point
 * @summary Create delivery-point
 */
export const postApiDelivery = (
    modelCreateDeliveryPointDto: BodyType<ModelCreateDeliveryPointDto>,
 ) => {
      return api<void>(
      {url: `/api/delivery/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: modelCreateDeliveryPointDto
    },
      );
    }
  
/**
 * Find delivery-point by id
 * @summary Find delivery-point by id
 */
export const getApiDeliverySearch = (
    params?: GetApiDeliverySearchParams,
 ) => {
      return api<ModelDeliveryPoint[]>(
      {url: `/api/delivery/search`, method: 'GET',
        params
    },
      );
    }
  
/**
 * Find delivery-point by id
 * @summary Find delivery-point by id
 */
export const getApiDeliveryId = (
    id: number,
 ) => {
      return api<ModelDeliveryPoint>(
      {url: `/api/delivery/${id}`, method: 'GET'
    },
      );
    }
  
/**
 * Delete delivery-point by id
 * @summary Delete delivery-point by id
 */
export const deleteApiDeliveryId = (
    id: number,
 ) => {
      return api<void>(
      {url: `/api/delivery/${id}`, method: 'DELETE'
    },
      );
    }
  
/**
 * Update delivery-point
 * @summary Update delivery-point
 */
export const patchApiDeliveryId = (
    id: number,
    modelUpdateDeliveryPointDto: BodyType<ModelUpdateDeliveryPointDto>,
 ) => {
      return api<void>(
      {url: `/api/delivery/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: modelUpdateDeliveryPointDto
    },
      );
    }
  
/**
 * Get all feedback
 * @summary Get all feedback
 */
export const getApiFeedback = (
    params?: GetApiFeedbackParams,
 ) => {
      return api<ModelFeedback[]>(
      {url: `/api/feedback/`, method: 'GET',
        params
    },
      );
    }
  
/**
 * Add feedback to model
 * @summary Add feedback to model
 */
export const postApiFeedback = (
    modelAddFeedbackDto: BodyType<ModelAddFeedbackDto>,
 ) => {
      return api<void>(
      {url: `/api/feedback/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: modelAddFeedbackDto
    },
      );
    }
  
/**
 * Get model feedback by modelId
 * @summary Get model feedback by modelId
 */
export const getApiFeedbackModelModelId = (
    modelId: number,
 ) => {
      return api<ModelModelFeedbackResponse>(
      {url: `/api/feedback/model/${modelId}`, method: 'GET'
    },
      );
    }
  
/**
 * Delete feedback by id
 * @summary Delete feedback by id
 */
export const deleteApiFeedbackId = (
    id: number,
 ) => {
      return api<void>(
      {url: `/api/feedback/${id}`, method: 'DELETE'
    },
      );
    }
  
/**
 * Toggle hidden feedback
 * @summary Toggle hidden feedback
 */
export const patchApiFeedbackId = (
    id: number,
 ) => {
      return api<void>(
      {url: `/api/feedback/${id}`, method: 'PATCH'
    },
      );
    }
  
/**
 * Upload file
 * @summary Upload file
 */
export const postApiFile = (
    postApiFileBody: BodyType<PostApiFileBody>,
 ) => {const formData = new FormData();
formData.append('file', postApiFileBody.file)

      return api<ModelUploadResponse>(
      {url: `/api/file/`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      );
    }
  
/**
 * Create product
 * @summary Create product
 */
export const postApiProduct = (
    modelCreateProductDto: BodyType<ModelCreateProductDto>,
 ) => {
      return api<FallAppErr>(
      {url: `/api/product/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: modelCreateProductDto
    },
      );
    }
  
/**
 * Get products for admin panel
 * @summary Get products for admin panel
 */
export const getApiProductAdmin = (
    params: GetApiProductAdminParams,
 ) => {
      return api<ModelAdminProductResponse>(
      {url: `/api/product/admin`, method: 'GET',
        params
    },
      );
    }
  
/**
 * Get product models
 * @summary Get product models
 */
export const getApiProductAdminModelsProductId = (
    productId: number,
 ) => {
      return api<ModelAdminProductModelRelation[]>(
      {url: `/api/product/admin/models/${productId}`, method: 'GET'
    },
      );
    }
  
/**
 * Get catalog models
 * @summary Get catalog models
 */
export const getApiProductCatalogCategorySlug = (
    categorySlug: string,
    params?: GetApiProductCatalogCategorySlugParams,
 ) => {
      return api<ModelCatalogResponse>(
      {url: `/api/product/catalog/${categorySlug}`, method: 'GET',
        params
    },
      );
    }
  
/**
 * Create product model
 * @summary Create product model
 */
export const postApiProductModel = (
    modelCreateProductModelDto: BodyType<ModelCreateProductModelDto>,
 ) => {
      return api<FallAppErr>(
      {url: `/api/product/model/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: modelCreateProductModelDto
    },
      );
    }
  
/**
 * Get product models color
 * @summary Get product models color
 */
export const getApiProductModelColorsId = (
    id: number,
 ) => {
      return api<ModelProductModelColors[]>(
      {url: `/api/product/model/colors/${id}`, method: 'GET'
    },
      );
    }
  
/**
 * Add img to product model
 * @summary Add img to product model
 */
export const postApiProductModelImg = (
    modelCreateProducModelImg: BodyType<ModelCreateProducModelImg>,
 ) => {
      return api<FallAppErr>(
      {url: `/api/product/model/img`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: modelCreateProducModelImg
    },
      );
    }
  
/**
 * Delete product model img
 * @summary Delete product model img
 */
export const deleteApiProductModelImgImgId = (
    imgId: number,
 ) => {
      return api<FallAppErr>(
      {url: `/api/product/model/img/${imgId}`, method: 'DELETE'
    },
      );
    }
  
/**
 * Get product model page
 * @summary Get product model page
 */
export const getApiProductModelPageSlug = (
    slug: string,
 ) => {
      return api<ModelProductRelation>(
      {url: `/api/product/model/page/${slug}`, method: 'GET'
    },
      );
    }
  
/**
 * Update product model
 * @summary Update product model
 */
export const patchApiProductModelId = (
    id: number,
    modelUpdateProductModelDto: BodyType<ModelUpdateProductModelDto>,
 ) => {
      return api<FallAppErr>(
      {url: `/api/product/model/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: modelUpdateProductModelDto
    },
      );
    }
  
/**
 * Delete product model
 * @summary Delete product model
 */
export const deleteApiProductModelModelId = (
    modelId: number,
 ) => {
      return api<FallAppErr>(
      {url: `/api/product/model/${modelId}`, method: 'DELETE'
    },
      );
    }
  
/**
 * Delete product
 * @summary Delete product
 */
export const deleteApiProductId = (
    id: number,
 ) => {
      return api<FallAppErr>(
      {url: `/api/product/${id}`, method: 'DELETE'
    },
      );
    }
  
/**
 * Update product
 * @summary Update product
 */
export const patchApiProductId = (
    id: number,
    modelUpdateProductDto: BodyType<ModelUpdateProductDto>,
 ) => {
      return api<FallAppErr>(
      {url: `/api/product/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: modelUpdateProductDto
    },
      );
    }
  
/**
 * Find all roles
 * @summary Find all roles
 */
export const getApiRole = (
    
 ) => {
      return api<ModelRole[]>(
      {url: `/api/role/`, method: 'GET'
    },
      );
    }
  
/**
 * Create role by body arguments
 * @summary Create role
 */
export const postApiRole = (
    modelCreateRoleDto: BodyType<ModelCreateRoleDto>,
 ) => {
      return api<ModelRole>(
      {url: `/api/role/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: modelCreateRoleDto
    },
      );
    }
  
/**
 * Add role to user by body arguments
 * @summary Add role to user
 */
export const postApiRoleAddToUser = (
    modelAddRoleToUserDto: BodyType<ModelAddRoleToUserDto>,
 ) => {
      return api<void>(
      {url: `/api/role/add-to-user`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: modelAddRoleToUserDto
    },
      );
    }
  
/**
 * Remove role from user by body arguments
 * @summary Remove role from user
 */
export const deleteApiRoleRemoveFromUser = (
    modelAddRoleToUserDto: BodyType<ModelAddRoleToUserDto>,
 ) => {
      return api<void>(
      {url: `/api/role/remove-from-user`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: modelAddRoleToUserDto
    },
      );
    }
  
/**
 * Remove role by id
 * @summary Remove role
 */
export const deleteApiRoleId = (
    id: string,
 ) => {
      return api<void>(
      {url: `/api/role/${id}`, method: 'DELETE'
    },
      );
    }
  
/**
 * Find one role by title
 * @summary Find one role by title
 */
export const getApiRoleTitle = (
    title: string,
 ) => {
      return api<ModelRole>(
      {url: `/api/role/${title}`, method: 'GET'
    },
      );
    }
  
/**
 * Get wish cart items
 * @summary Get user wish items
 */
export const getApiWish = (
    
 ) => {
      return api<ModelCatalogProductModel[]>(
      {url: `/api/wish/`, method: 'GET'
    },
      );
    }
  
/**
 * Toggle wishlist item
 * @summary Toggle wishlist item
 */
export const postApiWish = (
    modelAddToWishDto: BodyType<ModelAddToWishDto>,
 ) => {
      return api<void>(
      {url: `/api/wish/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: modelAddToWishDto
    },
      );
    }
  
/**
 * Get user cart items
 * @summary Get user cart items
 */
export const getApiWishCart = (
    
 ) => {
      return api<ModelCartItem[]>(
      {url: `/api/wish/cart`, method: 'GET'
    },
      );
    }
  
/**
 * Add item to cart
 * @summary Add item to cart
 */
export const postApiWishCart = (
    modelAddToCartDto: BodyType<ModelAddToCartDto>,
 ) => {
      return api<void>(
      {url: `/api/wish/cart`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: modelAddToCartDto
    },
      );
    }
  
/**
 * Increase cart item quantity
 * @summary Increase cart item quantity
 */
export const patchApiWishCartIncreaseModelSizeId = (
    modelSizeId: number,
 ) => {
      return api<void>(
      {url: `/api/wish/cart/increase/${modelSizeId}`, method: 'PATCH'
    },
      );
    }
  
/**
 * Increase cart item quantity
 * @summary Reduce cart item quantity
 */
export const patchApiWishCartReduceModelSizeId = (
    modelSizeId: number,
 ) => {
      return api<void>(
      {url: `/api/wish/cart/reduce/${modelSizeId}`, method: 'PATCH'
    },
      );
    }
  
/**
 * Delete several items from cart
 * @summary Delete several items from cart
 */
export const deleteApiWishCartSeveralIds = (
    ids: string,
 ) => {
      return api<void>(
      {url: `/api/wish/cart/several/${ids}`, method: 'DELETE'
    },
      );
    }
  
/**
 * Delete item from cart
 * @summary Delete item from cart
 */
export const deleteApiWishCartModelSizeId = (
    modelSizeId: number,
 ) => {
      return api<void>(
      {url: `/api/wish/cart/${modelSizeId}`, method: 'DELETE'
    },
      );
    }
  
export type PostApiAuthLoginResult = NonNullable<Awaited<ReturnType<typeof postApiAuthLogin>>>
export type GetApiAuthRefreshTokenResult = NonNullable<Awaited<ReturnType<typeof getApiAuthRefreshToken>>>
export type PostApiAuthRegistrationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthRegistration>>>
export type GetApiBrandResult = NonNullable<Awaited<ReturnType<typeof getApiBrand>>>
export type PostApiBrandResult = NonNullable<Awaited<ReturnType<typeof postApiBrand>>>
export type PatchApiBrandIdResult = NonNullable<Awaited<ReturnType<typeof patchApiBrandId>>>
export type GetApiBrandSlugResult = NonNullable<Awaited<ReturnType<typeof getApiBrandSlug>>>
export type DeleteApiBrandSlugResult = NonNullable<Awaited<ReturnType<typeof deleteApiBrandSlug>>>
export type GetApiCategoryResult = NonNullable<Awaited<ReturnType<typeof getApiCategory>>>
export type PostApiCategoryResult = NonNullable<Awaited<ReturnType<typeof postApiCategory>>>
export type GetApiCategoryCatalogSlugResult = NonNullable<Awaited<ReturnType<typeof getApiCategoryCatalogSlug>>>
export type GetApiCategoryRelationSlugResult = NonNullable<Awaited<ReturnType<typeof getApiCategoryRelationSlug>>>
export type GetApiCategoryTopResult = NonNullable<Awaited<ReturnType<typeof getApiCategoryTop>>>
export type PatchApiCategoryIdResult = NonNullable<Awaited<ReturnType<typeof patchApiCategoryId>>>
export type GetApiCategorySlugResult = NonNullable<Awaited<ReturnType<typeof getApiCategorySlug>>>
export type DeleteApiCategorySlugResult = NonNullable<Awaited<ReturnType<typeof deleteApiCategorySlug>>>
export type GetApiCharacteristicsCatalogSlugResult = NonNullable<Awaited<ReturnType<typeof getApiCharacteristicsCatalogSlug>>>
export type GetApiCharacteristicsOptionResult = NonNullable<Awaited<ReturnType<typeof getApiCharacteristicsOption>>>
export type PostApiCharacteristicsOptionResult = NonNullable<Awaited<ReturnType<typeof postApiCharacteristicsOption>>>
export type PostApiCharacteristicsOptionModelResult = NonNullable<Awaited<ReturnType<typeof postApiCharacteristicsOptionModel>>>
export type DeleteApiCharacteristicsOptionModelIdResult = NonNullable<Awaited<ReturnType<typeof deleteApiCharacteristicsOptionModelId>>>
export type DeleteApiCharacteristicsOptionIdResult = NonNullable<Awaited<ReturnType<typeof deleteApiCharacteristicsOptionId>>>
export type PatchApiCharacteristicsOptionIdResult = NonNullable<Awaited<ReturnType<typeof patchApiCharacteristicsOptionId>>>
export type GetApiCharacteristicsOptionSlugResult = NonNullable<Awaited<ReturnType<typeof getApiCharacteristicsOptionSlug>>>
export type PostApiCharacteristicsSizeResult = NonNullable<Awaited<ReturnType<typeof postApiCharacteristicsSize>>>
export type PostApiCharacteristicsSizeModelResult = NonNullable<Awaited<ReturnType<typeof postApiCharacteristicsSizeModel>>>
export type DeleteApiCharacteristicsSizeModelIdResult = NonNullable<Awaited<ReturnType<typeof deleteApiCharacteristicsSizeModelId>>>
export type DeleteApiCharacteristicsSizeIdResult = NonNullable<Awaited<ReturnType<typeof deleteApiCharacteristicsSizeId>>>
export type PostApiCharacteristicsValueResult = NonNullable<Awaited<ReturnType<typeof postApiCharacteristicsValue>>>
export type DeleteApiCharacteristicsValueIdResult = NonNullable<Awaited<ReturnType<typeof deleteApiCharacteristicsValueId>>>
export type PatchApiCharacteristicsValueIdResult = NonNullable<Awaited<ReturnType<typeof patchApiCharacteristicsValueId>>>
export type PostApiDeliveryResult = NonNullable<Awaited<ReturnType<typeof postApiDelivery>>>
export type GetApiDeliverySearchResult = NonNullable<Awaited<ReturnType<typeof getApiDeliverySearch>>>
export type GetApiDeliveryIdResult = NonNullable<Awaited<ReturnType<typeof getApiDeliveryId>>>
export type DeleteApiDeliveryIdResult = NonNullable<Awaited<ReturnType<typeof deleteApiDeliveryId>>>
export type PatchApiDeliveryIdResult = NonNullable<Awaited<ReturnType<typeof patchApiDeliveryId>>>
export type GetApiFeedbackResult = NonNullable<Awaited<ReturnType<typeof getApiFeedback>>>
export type PostApiFeedbackResult = NonNullable<Awaited<ReturnType<typeof postApiFeedback>>>
export type GetApiFeedbackModelModelIdResult = NonNullable<Awaited<ReturnType<typeof getApiFeedbackModelModelId>>>
export type DeleteApiFeedbackIdResult = NonNullable<Awaited<ReturnType<typeof deleteApiFeedbackId>>>
export type PatchApiFeedbackIdResult = NonNullable<Awaited<ReturnType<typeof patchApiFeedbackId>>>
export type PostApiFileResult = NonNullable<Awaited<ReturnType<typeof postApiFile>>>
export type PostApiProductResult = NonNullable<Awaited<ReturnType<typeof postApiProduct>>>
export type GetApiProductAdminResult = NonNullable<Awaited<ReturnType<typeof getApiProductAdmin>>>
export type GetApiProductAdminModelsProductIdResult = NonNullable<Awaited<ReturnType<typeof getApiProductAdminModelsProductId>>>
export type GetApiProductCatalogCategorySlugResult = NonNullable<Awaited<ReturnType<typeof getApiProductCatalogCategorySlug>>>
export type PostApiProductModelResult = NonNullable<Awaited<ReturnType<typeof postApiProductModel>>>
export type GetApiProductModelColorsIdResult = NonNullable<Awaited<ReturnType<typeof getApiProductModelColorsId>>>
export type PostApiProductModelImgResult = NonNullable<Awaited<ReturnType<typeof postApiProductModelImg>>>
export type DeleteApiProductModelImgImgIdResult = NonNullable<Awaited<ReturnType<typeof deleteApiProductModelImgImgId>>>
export type GetApiProductModelPageSlugResult = NonNullable<Awaited<ReturnType<typeof getApiProductModelPageSlug>>>
export type PatchApiProductModelIdResult = NonNullable<Awaited<ReturnType<typeof patchApiProductModelId>>>
export type DeleteApiProductModelModelIdResult = NonNullable<Awaited<ReturnType<typeof deleteApiProductModelModelId>>>
export type DeleteApiProductIdResult = NonNullable<Awaited<ReturnType<typeof deleteApiProductId>>>
export type PatchApiProductIdResult = NonNullable<Awaited<ReturnType<typeof patchApiProductId>>>
export type GetApiRoleResult = NonNullable<Awaited<ReturnType<typeof getApiRole>>>
export type PostApiRoleResult = NonNullable<Awaited<ReturnType<typeof postApiRole>>>
export type PostApiRoleAddToUserResult = NonNullable<Awaited<ReturnType<typeof postApiRoleAddToUser>>>
export type DeleteApiRoleRemoveFromUserResult = NonNullable<Awaited<ReturnType<typeof deleteApiRoleRemoveFromUser>>>
export type DeleteApiRoleIdResult = NonNullable<Awaited<ReturnType<typeof deleteApiRoleId>>>
export type GetApiRoleTitleResult = NonNullable<Awaited<ReturnType<typeof getApiRoleTitle>>>
export type GetApiWishResult = NonNullable<Awaited<ReturnType<typeof getApiWish>>>
export type PostApiWishResult = NonNullable<Awaited<ReturnType<typeof postApiWish>>>
export type GetApiWishCartResult = NonNullable<Awaited<ReturnType<typeof getApiWishCart>>>
export type PostApiWishCartResult = NonNullable<Awaited<ReturnType<typeof postApiWishCart>>>
export type PatchApiWishCartIncreaseModelSizeIdResult = NonNullable<Awaited<ReturnType<typeof patchApiWishCartIncreaseModelSizeId>>>
export type PatchApiWishCartReduceModelSizeIdResult = NonNullable<Awaited<ReturnType<typeof patchApiWishCartReduceModelSizeId>>>
export type DeleteApiWishCartSeveralIdsResult = NonNullable<Awaited<ReturnType<typeof deleteApiWishCartSeveralIds>>>
export type DeleteApiWishCartModelSizeIdResult = NonNullable<Awaited<ReturnType<typeof deleteApiWishCartModelSizeId>>>
